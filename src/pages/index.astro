---
import AIImageGenerator from '../components/AIImageGenerator/AIImageGenerator.astro';
import '../styles/global.css';
---

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Image Generator</title>
    
    <!-- Konva.js CDN - Using stable version -->
    <script src="https://unpkg.com/konva@9.3.14/konva.min.js"></script>
</head>
<body>
    <AIImageGenerator />
    
    <script type="module">
        // Canvas Manager - Inline Version
        class CanvasManager {
            constructor() {
                this.stage = null;
                this.mainLayer = null;
                this.uiLayer = null;
                this.currentTool = 'select';
                this.isDrawing = false;
                this.lastLine = null;
                this.transformer = null;
                this.zoomLevel = 0.25;
                this.isDragging = false;
                this.selectedElement = null;
                this.textEditMode = false;
                
                this.init();
            }

            init() {
                this.setupStage();
                this.setupLayers();
                this.setupTransformer();
                this.setupEventListeners();
                this.updateEmptyState();
            }

            setupStage() {
                const container = document.getElementById('konva-stage');
                if (!container) return;

                const containerRect = container.getBoundingClientRect();
                
                this.stage = new Konva.Stage({
                    container: 'konva-stage',
                    width: containerRect.width,
                    height: containerRect.height,
                    draggable: false
                });

                this.setZoom(this.zoomLevel);
                this.centerStage();
            }

            setupLayers() {
                this.mainLayer = new Konva.Layer();
                this.stage.add(this.mainLayer);

                this.uiLayer = new Konva.Layer();
                this.stage.add(this.uiLayer);
            }

            setupTransformer() {
                this.transformer = new Konva.Transformer({
                    nodes: [],
                    keepRatio: false,
                    enabledAnchors: ['top-left', 'top-right', 'bottom-left', 'bottom-right', 'middle-left', 'middle-right'],
                    borderStroke: '#2563eb',
                    borderStrokeWidth: 2,
                    anchorFill: '#2563eb',
                    anchorStroke: '#ffffff',
                    anchorSize: 8,
                });
                this.uiLayer.add(this.transformer);
            }

            setupEventListeners() {
                this.setupToolListeners();
                this.setupStageListeners();
                window.addEventListener('resize', () => this.handleResize());
                this.setupZoomListeners();
            }

            setupToolListeners() {
                const toolButtons = document.querySelectorAll('[data-tool]');
                toolButtons.forEach(button => {
                    button.addEventListener('click', (e) => {
                        const tool = e.currentTarget.getAttribute('data-tool');
                        this.setTool(tool);
                    });
                });
            }

            setupStageListeners() {
                this.stage.on('mousedown touchstart', (e) => this.handleMouseDown(e));
                this.stage.on('mousemove touchmove', (e) => this.handleMouseMove(e));
                this.stage.on('mouseup touchend', () => this.handleMouseUp());
                this.stage.on('click tap', (e) => this.handleClick(e));
                this.stage.on('dblclick', (e) => this.handleDoubleClick(e));
                this.stage.on('wheel', (e) => this.handleWheel(e));
            }

            setupZoomListeners() {
                const zoomInBtn = document.getElementById('zoom-in');
                const zoomOutBtn = document.getElementById('zoom-out');
                const zoomDisplay = document.getElementById('zoom-display');

                if (zoomInBtn) zoomInBtn.addEventListener('click', () => this.zoomIn());
                if (zoomOutBtn) zoomOutBtn.addEventListener('click', () => this.zoomOut());
                if (zoomDisplay) zoomDisplay.addEventListener('click', () => this.resetZoom());
            }

            setTool(tool) {
                this.currentTool = tool;
                this.stage.container().className = `konva-content tool-${tool}`;
                
                if (tool !== 'select') {
                    this.clearSelection();
                }
                
                this.updateCursor();
                console.log(`Tool changed to: ${tool}`);
            }

            updateCursor() {
                const container = this.stage.container();
                const cursorMap = {
                    'select': 'default',
                    'text': 'text',
                    'shape': 'crosshair',
                    'pencil': 'crosshair',
                    'move': 'grab'
                };
                
                container.style.cursor = cursorMap[this.currentTool] || 'default';
            }

            handleMouseDown(e) {
                if (this.currentTool === 'pencil') {
                    this.startDrawing(e);
                } else if (this.currentTool === 'move') {
                    this.startPanning(e);
                } else if (this.currentTool === 'text') {
                    this.addText(e);
                } else if (this.currentTool === 'shape') {
                    this.startShape(e);
                }
            }

            handleMouseMove(e) {
                if (this.isDrawing && this.currentTool === 'pencil') {
                    this.continueDrawing(e);
                } else if (this.isDragging && this.currentTool === 'move') {
                    this.continuePanning(e);
                }
            }

            handleMouseUp() {
                if (this.isDrawing) this.stopDrawing();
                if (this.isDragging) this.stopPanning();
            }

            handleClick(e) {
                if (this.currentTool === 'select') {
                    this.handleSelection(e);
                }
            }

            handleDoubleClick(e) {
                if (e.target.getClassName() === 'Text') {
                    this.editText(e.target);
                }
            }

            handleWheel(e) {
                e.evt.preventDefault();
                
                const scaleBy = 1.1;
                const stage = this.stage;
                const oldScale = stage.scaleX();
                const pointer = stage.getPointerPosition();

                const mousePointTo = {
                    x: (pointer.x - stage.x()) / oldScale,
                    y: (pointer.y - stage.y()) / oldScale,
                };

                const newScale = e.evt.deltaY > 0 ? oldScale / scaleBy : oldScale * scaleBy;
                const clampedScale = Math.max(0.1, Math.min(5, newScale));
                
                stage.scale({ x: clampedScale, y: clampedScale });

                const newPos = {
                    x: pointer.x - mousePointTo.x * clampedScale,
                    y: pointer.y - mousePointTo.y * clampedScale,
                };
                
                stage.position(newPos);
                
                this.zoomLevel = clampedScale;
                this.updateZoomDisplay();
                this.stage.batchDraw();
            }

            startDrawing(e) {
                this.isDrawing = true;
                const pos = this.stage.getPointerPosition();
                
                this.lastLine = new Konva.Line({
                    stroke: '#2563eb',
                    strokeWidth: 3,
                    globalCompositeOperation: 'source-over',
                    lineCap: 'round',
                    lineJoin: 'round',
                    points: [pos.x, pos.y, pos.x, pos.y],
                });
                
                this.mainLayer.add(this.lastLine);
                this.updateEmptyState();
            }

            continueDrawing(e) {
                if (!this.isDrawing) return;
                
                const pos = this.stage.getPointerPosition();
                const newPoints = this.lastLine.points().concat([pos.x, pos.y]);
                this.lastLine.points(newPoints);
                this.stage.batchDraw();
            }

            stopDrawing() {
                this.isDrawing = false;
                this.lastLine = null;
            }

            startPanning(e) {
                this.isDragging = true;
                this.stage.container().style.cursor = 'grabbing';
                this.stage.draggable(true);
            }

            stopPanning() {
                this.isDragging = false;
                this.stage.container().style.cursor = 'grab';
                this.stage.draggable(false);
            }

            addText(e) {
                const pos = this.stage.getPointerPosition();
                
                const text = new Konva.Text({
                    x: pos.x,
                    y: pos.y,
                    text: 'Double click to edit',
                    fontSize: 24,
                    fontFamily: 'Arial',
                    fill: '#2d2d2d',
                    draggable: true,
                });
                
                this.mainLayer.add(text);
                this.stage.batchDraw();
                this.updateEmptyState();
                this.selectElement(text);
            }

            editText(textNode) {
                this.textEditMode = true;
                
                const textPosition = textNode.absolutePosition();
                const stageBox = this.stage.container().getBoundingClientRect();
                
                const textarea = document.createElement('textarea');
                document.body.appendChild(textarea);
                
                textarea.value = textNode.text();
                textarea.style.cssText = `
                    position: absolute;
                    top: ${stageBox.top + textPosition.y}px;
                    left: ${stageBox.left + textPosition.x}px;
                    width: ${textNode.width()}px;
                    height: ${textNode.height()}px;
                    fontSize: ${textNode.fontSize()}px;
                    border: none;
                    padding: 0px;
                    margin: 0px;
                    overflow: hidden;
                    background: none;
                    outline: none;
                    resize: none;
                    fontFamily: ${textNode.fontFamily()};
                    color: ${textNode.fill()};
                `;
                
                textarea.focus();
                textarea.select();
                
                const removeTextarea = () => {
                    textarea.parentNode.removeChild(textarea);
                    this.textEditMode = false;
                    this.stage.batchDraw();
                };
                
                textarea.addEventListener('keydown', (e) => {
                    if (e.keyCode === 13 && !e.shiftKey) {
                        textNode.text(textarea.value);
                        removeTextarea();
                    }
                    if (e.keyCode === 27) {
                        removeTextarea();
                    }
                });
                
                textarea.addEventListener('blur', () => {
                    textNode.text(textarea.value);
                    removeTextarea();
                });
            }

            startShape(e) {
                const pos = this.stage.getPointerPosition();
                
                const rect = new Konva.Rect({
                    x: pos.x,
                    y: pos.y,
                    width: 100,
                    height: 60,
                    fill: '#e5e7eb',
                    stroke: '#2563eb',
                    strokeWidth: 2,
                    draggable: true,
                });
                
                this.mainLayer.add(rect);
                this.stage.batchDraw();
                this.updateEmptyState();
                this.selectElement(rect);
            }

            handleSelection(e) {
                if (e.target === this.stage) {
                    this.clearSelection();
                    return;
                }
                
                this.selectElement(e.target);
            }

            selectElement(element) {
                this.selectedElement = element;
                this.transformer.nodes([element]);
                this.uiLayer.batchDraw();
            }

            clearSelection() {
                this.selectedElement = null;
                this.transformer.nodes([]);
                this.uiLayer.batchDraw();
            }

            setZoom(scale) {
                this.zoomLevel = scale;
                this.stage.scale({ x: scale, y: scale });
                this.centerStage();
                this.updateZoomDisplay();
                this.stage.batchDraw();
            }

            zoomIn() {
                const newZoom = Math.min(this.zoomLevel * 1.2, 5);
                this.setZoom(newZoom);
            }

            zoomOut() {
                const newZoom = Math.max(this.zoomLevel / 1.2, 0.1);
                this.setZoom(newZoom);
            }

            resetZoom() {
                this.setZoom(1);
            }

            updateZoomDisplay() {
                const zoomDisplay = document.getElementById('zoom-display');
                if (zoomDisplay) {
                    zoomDisplay.textContent = Math.round(this.zoomLevel * 100) + '%';
                }
            }

            centerStage() {
                const containerRect = this.stage.container().getBoundingClientRect();
                const stageWidth = containerRect.width;
                const stageHeight = containerRect.height;
                
                this.stage.position({
                    x: stageWidth / 2,
                    y: stageHeight / 2
                });
            }

            addGeneratedImage(imageUrl, width = 512, height = 512) {
                const imageObj = new Image();
                imageObj.onload = () => {
                    const image = new Konva.Image({
                        x: -width / 2,
                        y: -height / 2,
                        image: imageObj,
                        width: width,
                        height: height,
                        draggable: true,
                    });
                    
                    this.mainLayer.add(image);
                    this.stage.batchDraw();
                    this.updateEmptyState();
                    this.selectElement(image);
                };
                imageObj.src = imageUrl;
            }

            updateEmptyState() {
                const emptyState = document.getElementById('empty-state');
                const hasContent = this.mainLayer.children.length > 0;
                
                if (emptyState) {
                    emptyState.style.display = hasContent ? 'none' : 'flex';
                }
            }

            handleResize() {
                const container = document.getElementById('konva-stage');
                if (!container) return;
                
                const containerRect = container.getBoundingClientRect();
                this.stage.size({
                    width: containerRect.width,
                    height: containerRect.height
                });
                
                this.stage.batchDraw();
            }

            deleteSelected() {
                if (this.selectedElement) {
                    this.selectedElement.destroy();
                    this.clearSelection();
                    this.stage.batchDraw();
                    this.updateEmptyState();
                }
            }
        }

        // Initialize canvas manager
        let canvasManager;

        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(() => {
                if (typeof Konva !== 'undefined') {
                    canvasManager = new CanvasManager();
                    window.canvasManager = canvasManager;
                    
                    // Keyboard shortcuts
                    document.addEventListener('keydown', (e) => {
                        if (e.key === 'Delete' || e.key === 'Backspace') {
                            if (canvasManager && !canvasManager.textEditMode) {
                                canvasManager.deleteSelected();
                            }
                        }
                        
                        if (e.ctrlKey || e.metaKey) {
                            switch(e.key) {
                                case '1': e.preventDefault(); canvasManager.setTool('select'); break;
                                case '2': e.preventDefault(); canvasManager.setTool('text'); break;
                                case '3': e.preventDefault(); canvasManager.setTool('shape'); break;
                                case '4': e.preventDefault(); canvasManager.setTool('pencil'); break;
                                case '5': e.preventDefault(); canvasManager.setTool('move'); break;
                            }
                        }
                    });
                    
                    console.log('Canvas Manager initialized');
                } else {
                    console.error('Konva.js not loaded');
                }
            }, 100);

            // Tool selection
            const toolButtons = document.querySelectorAll('[data-tool]');
            toolButtons.forEach(button => {
                button.addEventListener('click', function() {
                    toolButtons.forEach(btn => btn.classList.remove('selected'));
                    this.classList.add('selected');
                });
            });

            // Generate button
            const generateButton = document.getElementById('generate-btn');
            const promptTextarea = document.getElementById('prompt-textarea');
            
            generateButton?.addEventListener('click', async function() {
                if (!this.classList.contains('disabled')) {
                    const prompt = promptTextarea?.value || 'A beautiful landscape';
                    
                    this.classList.add('disabled');
                    this.innerHTML = `
                        <div class="flex items-center justify-center w-full">
                            <div class="animate-spin rounded-full border-b-2 border-white mr-2" style="height: 16px; width: 16px;"></div>
                            <span>Generating...</span>
                        </div>
                    `;
                    
                    try {
                        await simulateImageGeneration(prompt);
                    } catch (error) {
                        console.error('Generation failed:', error);
                    } finally {
                        this.classList.remove('disabled');
                        this.innerHTML = `
                            <div class="flex items-center">
                                <span class="mr-1">4</span>
                                <svg width="12" height="12" fill="none" viewBox="0 0 24 24">
                                    <path fill="currentColor" d="m5 9.415 1.414-1.414 5.293 5.293L17 8l1.414 1.414-6.707 6.707z"/>
                                </svg>
                            </div>
                            <div style="width: 1px; height: 24px; background: rgba(255,255,255,0.2);"></div>
                            <div class="flex-1 flex justify-center items-center">
                                <span>Generate</span>
                                <div class="ml-2 flex items-center">
                                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <polyline points="13.18 1.37 13.18 9.64 21.45 9.64 10.82 22.63 10.82 14.36 2.55 14.36 13.18 1.37"/>
                                    </svg>
                                    <span class="ml-1">36</span>
                                </div>
                            </div>
                        `;
                    }
                }
            });
            
            async function simulateImageGeneration(prompt) {
                return new Promise((resolve) => {
                    setTimeout(() => {
                        const imageUrl = `https://picsum.photos/512/512?random=${Date.now()}`;
                        
                        if (window.canvasManager) {
                            window.canvasManager.addGeneratedImage(imageUrl, 512, 512);
                        }
                        
                        resolve(imageUrl);
                    }, 3000);
                });
            }
        });
    </script>
</body>
</html>