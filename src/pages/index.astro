<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Image Generator</title>
    <style>
        /* Reset and base styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f3f4f5;
            height: 100vh;
            overflow: hidden;
        }
        
        /* CSS Variables */
        :root {
            --primary-color: #2EE8C7;
            --bg-primary: #ffffff;
            --bg-secondary: #f3f4f5;
            --bg-tertiary: #f7f8fa;
            --border-color: #e5e6ec;
            --text-primary: #2d2d2d;
            --text-secondary: #2f3640;
            --text-muted: #999999;
            --hover-bg: #f2f4f6;
        }
        
        /* Utility Classes */
        .flex { display: flex; }
        .flex-col { flex-direction: column; }
        .items-center { align-items: center; }
        .items-stretch { align-items: stretch; }
        .justify-center { justify-content: center; }
        .justify-between { justify-content: space-between; }
        .gap-1 { gap: 0.25rem; }
        .gap-2 { gap: 0.5rem; }
        .gap-3 { gap: 0.75rem; }
        .gap-4 { gap: 1rem; }
        .gap-6 { gap: 1.5rem; }
        
        .w-full { width: 100%; }
        .w-4 { width: 1rem; }
        .w-7 { width: 1.75rem; }
        .w-8 { width: 2rem; }
        .w-10 { width: 2.5rem; }
        .w-16 { width: 4rem; }
        .w-80 { width: 20rem; }
        
        .h-full { height: 100%; }
        .h-4 { height: 1rem; }
        .h-5 { height: 1.25rem; }
        .h-7 { height: 1.75rem; }
        .h-8 { height: 2rem; }
        .h-10 { height: 2.5rem; }
        .h-12 { height: 3rem; }
        .h-16 { height: 4rem; }
        .h-screen { height: 100vh; }
        
        .p-1 { padding: 0.25rem; }
        .p-2 { padding: 0.5rem; }
        .p-3 { padding: 0.75rem; }
        .p-4 { padding: 1rem; }
        .px-1 { padding-left: 0.25rem; padding-right: 0.25rem; }
        .px-2 { padding-left: 0.5rem; padding-right: 0.5rem; }
        .px-3 { padding-left: 0.75rem; padding-right: 0.75rem; }
        .px-4 { padding-left: 1rem; padding-right: 1rem; }
        .py-1 { padding-top: 0.25rem; padding-bottom: 0.25rem; }
        .py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }
        .py-4 { padding-top: 1rem; padding-bottom: 1rem; }
        
        .m-1 { margin: 0.25rem; }
        .m-2 { margin: 0.5rem; }
        .m-4 { margin: 1rem; }
        .ml-1 { margin-left: 0.25rem; }
        .ml-2 { margin-left: 0.5rem; }
        .mr-1 { margin-right: 0.25rem; }
        .mr-2 { margin-right: 0.5rem; }
        .mr-4 { margin-right: 1rem; }
        .mt-1 { margin-top: 0.25rem; }
        .mt-2 { margin-top: 0.5rem; }
        .mt-4 { margin-top: 1rem; }
        .mb-2 { margin-bottom: 0.5rem; }
        .mb-4 { margin-bottom: 1rem; }
        
        .text-xs { font-size: 0.75rem; }
        .text-sm { font-size: 0.875rem; }
        .font-medium { font-weight: 500; }
        .font-semibold { font-weight: 600; }
        .font-bold { font-weight: 700; }
        
        .rounded { border-radius: 0.25rem; }
        .rounded-sm { border-radius: 0.125rem; }
        .rounded-md { border-radius: 0.375rem; }
        .rounded-lg { border-radius: 0.5rem; }
        .rounded-full { border-radius: 9999px; }
        
        .border { border-width: 1px; }
        .border-t { border-top-width: 1px; }
        .border-b { border-bottom-width: 1px; }
        .border-gray-200 { border-color: #e5e7eb; }
        .border-gray-300 { border-color: #d1d5db; }
        
        .bg-white { background-color: #ffffff; }
        .bg-gray-50 { background-color: #f9fafb; }
        .bg-gray-100 { background-color: #f3f4f6; }
        .bg-gray-200 { background-color: #e5e7eb; }
        .bg-gray-300 { background-color: #d1d5db; }
        .bg-gray-500 { background-color: #6b7280; }
        .bg-blue-50 { background-color: #eff6ff; }
        .bg-blue-600 { background-color: #2563eb; }
        .bg-yellow-400 { background-color: #facc15; }
        .bg-red-50 { background-color: #fef2f2; }
        .bg-red-600 { background-color: #dc2626; }
        .bg-green-600 { background-color: #16a34a; }
        
        .text-gray-400 { color: #9ca3af; }
        .text-gray-500 { color: #6b7280; }
        .text-gray-700 { color: #374151; }
        .text-gray-800 { color: #1f2937; }
        .text-gray-900 { color: #111827; }
        .text-blue-600 { color: #2563eb; }
        .text-white { color: #ffffff; }
        .text-red-600 { color: #dc2626; }
        
        .shadow { box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1); }
        .shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }
        
        .cursor-pointer { cursor: pointer; }
        .cursor-not-allowed { cursor: not-allowed; }
        .select-none { user-select: none; }
        .resize-none { resize: none; }
        .outline-none { outline: none; }
        .overflow-hidden { overflow: hidden; }
        .overflow-y-auto { overflow-y: auto; }
        
        .relative { position: relative; }
        .absolute { position: absolute; }
        .z-10 { z-index: 10; }
        .z-100 { z-index: 100; }
        
        .left-2 { left: 0.5rem; }
        .top-2 { top: 0.5rem; }
        .bottom-4 { bottom: 1rem; }
        .right-4 { right: 1rem; }
        
        .flex-1 { flex: 1 1 0%; }
        .flex-shrink-0 { flex-shrink: 0; }
        .flex-grow { flex-grow: 1; }
        
        .space-x-2 > * + * { margin-left: 0.5rem; }
        .space-x-3 > * + * { margin-left: 0.75rem; }
        .space-y-4 > * + * { margin-top: 1rem; }
        
        .transition-colors { transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out; }
        .transition-all { transition: all 0.15s ease-in-out; }
        
        /* Component Styles */
        .nav-icon-btn {
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 0.25rem;
            transition: all 0.15s ease-in-out;
            border: none;
            background: transparent;
            cursor: pointer;
        }
        
        .nav-icon-btn:hover {
            background-color: var(--hover-bg);
            transform: translateY(-1px);
        }
        
        .nav-icon-btn.selected {
            background-color: #eff6ff;
            color: #2563eb;
        }
        
        .generate-button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 0.5rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .generate-button:hover:not(.disabled) {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }
        
        .generate-button.disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        
        .canvas-area {
            background: #f3f4f5;
        }
        
        .scrollbar-thin {
            scrollbar-width: thin;
        }
        
        .scrollbar-thin::-webkit-scrollbar {
            width: 8px;
        }
        
        .scrollbar-thin::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        
        .scrollbar-thin::-webkit-scrollbar-thumb {
            background: #ccc;
            border-radius: 4px;
        }
        
        .panel-section {
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 1rem;
        }
        
        .input-field {
            background-color: var(--bg-tertiary);
            border: 1px solid var(--border-color);
            border-radius: 0.25rem;
            padding: 0.5rem;
            font-size: 0.75rem;
            color: var(--text-secondary);
            outline: none;
        }
        
        .input-field:focus {
            border-color: #c1c5cc;
        }
        
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 36px;
            height: 20px;
        }
        
        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 20px;
        }
        
        .slider:before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 2px;
            bottom: 2px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        
        input:checked + .slider {
            background-color: #2563eb;
        }
        
        input:checked + .slider:before {
            transform: translateX(16px);
        }
        
        .animate-spin {
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        
        /* Settings Modal */
        .modal-backdrop {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .modal-content {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
            width: 500px;
            max-width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 16px 20px;
            border-bottom: 1px solid #e5e7eb;
            background-color: #f9fafb;
        }
        
        .modal-header h2 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
            color: #111827;
        }
        
        .close-button {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #6b7280;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 32px;
            height: 32px;
            border-radius: 4px;
        }
        
        .close-button:hover {
            background-color: #f3f4f6;
            color: #111827;
        }
        
        .modal-body {
            padding: 20px;
        }
        
        .form-group {
            margin-bottom: 16px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #374151;
        }
        
        .api-key-input {
            width: 100%;
            padding: 10px 40px 10px 12px;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 14px;
        }
        
        .api-key-input:focus {
            outline: none;
            border-color: #2563eb;
            box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.1);
        }
        
        .api-key-help {
            font-size: 12px;
            color: #6b7280;
            margin-top: 4px;
        }
        
        .api-key-help a {
            color: #2563eb;
            text-decoration: none;
        }
        
        .api-key-help a:hover {
            text-decoration: underline;
        }
        
        .save-button {
            background-color: #2563eb;
            color: white;
            border: none;
            border-radius: 6px;
            padding: 10px 16px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .save-button:hover {
            background-color: #1d4ed8;
        }
        
        .save-button:disabled {
            background-color: #93c5fd;
            cursor: not-allowed;
        }
        
        .error-message {
            color: #dc2626;
            font-size: 14px;
            margin-top: 8px;
            padding: 10px;
            background-color: #fee2e2;
            border-radius: 6px;
            border: 1px solid #fca5a5;
        }
        
        .image-preview {
            max-width: 100%;
            max-height: 400px;
            object-fit: contain;
            border-radius: 8px;
            margin: 16px 0;
        }
        
        .preview-container {
            min-height: 200px;
            border: 2px dashed #d1d5db;
            border-radius: 8px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 20px;
            margin: 16px 0;
        }
        
        .add-to-canvas-button {
            background-color: #16a34a;
            color: white;
            border: none;
            border-radius: 6px;
            padding: 10px 16px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            margin-top: 12px;
        }
        
        .add-to-canvas-button:hover {
            background-color: #15803d;
        }
        
        .model-settings {
            margin: 16px 0;
            padding: 16px;
            background-color: #f9fafb;
            border-radius: 6px;
            border: 1px solid #e5e7eb;
        }
        
        .form-row {
            display: flex;
            gap: 12px;
            align-items: end;
        }
        
        .form-row .form-group {
            flex: 1;
            margin-bottom: 0;
        }
        
        .hidden { display: none; }
        
        .button-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 16px;
        }
        
        .right-buttons {
            display: flex;
            gap: 8px;
        }
        
        /* Responsive adjustments */
        @media (max-width: 1200px) {
            .min-w-[1200px] { min-width: 100%; }
        }
        
        .hide-scrollbar {
            -ms-overflow-style: none;
            scrollbar-width: none;
        }
        
        .hide-scrollbar::-webkit-scrollbar {
            display: none;
        }
    </style>
</head>
<body>
    <!-- Settings Modal -->
    <div id="settings-modal" class="modal-backdrop hidden">
        <div class="modal-content">
            <div class="modal-header">
                <h2>API Settings</h2>
                <button class="close-button" onclick="closeSettings()">×</button>
            </div>
            
            <div class="modal-body">
                <div class="form-group">
                    <label for="fal-api-key">Fal.ai API Key:</label>
                    <input
                        id="fal-api-key"
                        type="password"
                        class="api-key-input"
                        placeholder="Enter your Fal.ai API key"
                    />
                    <p class="api-key-help">
                        Don't have an API key? <a href="https://fal.ai/dashboard/keys" target="_blank" rel="noopener noreferrer">
                            Get one from Fal.ai
                        </a>
                    </p>
                </div>
                
                <div class="form-group">
                    <label for="openai-api-key">OpenAI API Key:</label>
                    <input
                        id="openai-api-key"
                        type="password"
                        class="api-key-input"
                        placeholder="Enter your OpenAI API key (for GPT-Image-1)"
                    />
                    <p class="api-key-help">
                        Don't have an OpenAI key? <a href="https://platform.openai.com/api-keys" target="_blank" rel="noopener noreferrer">
                            Get one from OpenAI
                        </a>
                    </p>
                </div>
                
                <div class="button-row">
                    <button onclick="saveApiKeys()" class="save-button">
                        Save API Keys
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Container -->
    <div class="w-full h-screen relative" style="background: #f3f4f5;">
        <div class="relative flex flex-col items-stretch w-full h-screen overflow-hidden">
            
            <!-- Navigation Bar -->
            <nav class="relative flex items-center justify-between flex-shrink-0 h-12 px-4 bg-white border-b border-gray-200" style="min-width: 1200px;">
                <!-- Left Section -->
                <div class="flex items-center z-10 gap-6">
                    <!-- Logo -->
                    <div>
                        <button class="nav-icon-btn h-7 px-2 gap-1">
                            <svg width="30" height="18" fill="none" viewBox="0 0 30 18" class="text-gray-800">
                                <rect width="26" height="14" x="2" y="2" rx="2" fill="currentColor"/>
                            </svg>
                            <svg width="12" height="12" fill="none" viewBox="0 0 12 12">
                                <path fill="#2D2D2D" fill-rule="evenodd" d="M2.5 4.707 3.207 4l2.647 2.646L8.5 4l.707.707-3.353 3.354z"/>
                            </svg>
                        </button>
                    </div>
                    
                    <!-- Tool Icons -->
                    <div class="flex gap-4 items-center">
                        <button class="nav-icon-btn w-7 h-7 selected" data-tool="select">
                            <svg width="16" height="16" fill="none" viewBox="0 0 16 16">
                                <path fill="currentColor" d="M1.898 1.633A1 1 0 0 0 .633 2.898L4.547 14.64c.285.855 1.467.926 1.852.111l2.21-4.666a1 1 0 0 1 .476-.475l4.666-2.21c.815-.386.744-1.568-.111-1.853zm11.425 4.863L1.582 2.582l3.914 11.741 2.21-4.666a2 2 0 0 1 .951-.951z"/>
                            </svg>
                        </button>
                        <button class="nav-icon-btn w-7 h-7" data-tool="text">
                            <svg width="16" height="16" fill="none" viewBox="0 0 16 16">
                                <path fill="currentColor" d="M2.5 2a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 .5.5v.857a.5.5 0 0 1-1 0V2.5h-4v11h1.167a.5.5 0 0 1 0 1H6.333a.5.5 0 0 1 0-1H7.5v-11h-4v.357a.5.5 0 1 1-1 0z"/>
                            </svg>
                        </button>
                        <button class="nav-icon-btn w-7 h-7" data-tool="shape">
                            <svg width="16" height="16" fill="none" viewBox="0 0 14 14">
                                <path fill="currentColor" fill-rule="evenodd" d="M12.688 2.917c0-.886-.719-1.604-1.605-1.604H2.917c-.886 0-1.604.718-1.604 1.604v8.166c0 .886.718 1.604 1.604 1.604h8.166c.886 0 1.604-.718 1.604-1.604zm-1.605-.73a.73.73 0 0 1 .73.73v8.166a.73.73 0 0 1-.73.73H2.917a.73.73 0 0 1-.73-.73V2.917a.73.73 0 0 1 .73-.73z"/>
                            </svg>
                        </button>
                        <button class="nav-icon-btn w-7 h-7" data-tool="pencil">
                            <svg width="16" height="16" fill="none" viewBox="0 0 16 16">
                                <path fill="currentColor" d="M11.105 1.53a2.38 2.38 0 1 1 3.364 3.365l-8.898 8.9a1.83 1.83 0 0 1-.761.455l-2.904.88a.833.833 0 0 1-1.038-1.036v-.002l.881-2.901v-.002c.089-.287.246-.548.459-.76zm.707.707-8.898 8.9a.83.83 0 0 0-.208.345l-.79 2.6 2.603-.788c.13-.04.249-.111.346-.207l8.897-8.9a1.38 1.38 0 1 0-1.95-1.95"/>
                            </svg>
                        </button>
                        <button class="nav-icon-btn w-7 h-7" data-tool="move">
                            <svg width="16" height="16" fill="none" viewBox="0 0 16 16">
                                <path fill="currentColor" d="M6.704 1.371A1.833 1.833 0 0 1 9.81 2.379a1.833 1.833 0 0 1 2.666 1.334 1.833 1.833 0 0 1 2.69 1.621v4a5.833 5.833 0 0 1-5.834 5.833H8c-2.001 0-3.26-.627-4.346-1.705v-.001l-2.4-2.4-.018-.019A1.833 1.833 0 0 1 3.5 8.22V4a1.833 1.833 0 0 1 2.69-1.622c.06-.38.238-.733.514-1.008"/>
                            </svg>
                        </button>
                    </div>
                </div>
                
                <!-- Right Section -->
                <div class="flex items-center gap-2">
                    <button class="nav-icon-btn h-7 px-2 gap-1">
                        <svg width="16" height="16" fill="none" viewBox="0 0 16 16">
                            <path fill="currentColor" d="M6.166 5.333a1.833 1.833 0 1 1 3.667 0 1.833 1.833 0 0 1-3.667 0M8 4.5a.833.833 0 1 0 0 1.666A.833.833 0 0 0 8 4.5"/>
                        </svg>
                        <span style="font-size: 0.75rem;">Showcase</span>
                    </button>
                    <button class="nav-icon-btn h-7 px-2 gap-1">
                        <svg width="16" height="16" fill="none" viewBox="0 0 16 16">
                            <path fill="currentColor" d="M3.5 5.333a.5.5 0 0 1 .5-.5h1.333a.5.5 0 0 1 0 1H4a.5.5 0 0 1-.5-.5"/>
                        </svg>
                        <span style="font-size: 0.75rem;">Tutorials</span>
                    </button>
                    
                    <!-- User Profile -->
                    <div class="rounded-full bg-gray-100 py-1 px-2 relative">
                        <div class="flex items-center cursor-pointer">
                            <div class="w-4 h-4 bg-yellow-400 rounded mr-1" style="width: 10px; height: 10px;"></div>
                            <div style="min-width: 16px; text-align: center; font-size: 0.75rem; font-weight: 500;">200</div>
                        </div>
                    </div>
                    <div class="w-7 h-7 rounded-full bg-gray-300"></div>
                </div>
            </nav>
            
            <!-- Main Content Area -->
            <div class="flex flex-1 items-stretch relative">
                <!-- Left Panel -->
                <aside class="absolute z-100 left-2 top-2 flex flex-col shadow-lg bg-white rounded-md border border-gray-200 w-80" style="max-height: calc(100% - 16px);">
                    <!-- Panel Header -->
                    <div class="flex items-center justify-between px-4 py-2 h-12 border-b border-gray-200 bg-gray-50" style="border-top-left-radius: 0.375rem; border-top-right-radius: 0.375rem;">
                        <div class="flex items-center text-gray-900">
                            <svg width="14" height="14" fill="none" viewBox="0 0 14 14" class="text-blue-600">
                                <path fill="currentColor" d="M8.166.584h-1.75v1.75h-1.75v1.75h-1.75v1.75h-1.75v1.75h1.75v1.75h1.75v1.75h1.75v1.75h1.75v-1.75l4.666-3.5v-1.75l-4.666-3.5zm-3.5 7h1.75v1.75h-1.75zm0-1.75h1.75v-1.75h-1.75zm0 0v1.75h-1.75v-1.75z"/>
                            </svg>
                            <div class="ml-2 font-medium text-sm">AI Generator</div>
                        </div>
                        <button class="w-4 h-4 text-blue-600" onclick="openSettings()">
                            <svg width="14" height="14" fill="none" viewBox="0 0 24 24">
                                <path fill="currentColor" d="M12 1l3.09 6.26L22 9l-5 5.74L18 22l-6-3.27L6 22l1-7.26L2 9l6.91-1.74L12 1z"/>
                            </svg>
                        </button>
                    </div>
                    
                    <!-- Panel Content -->
                    <div class="flex-1 overflow-y-auto scrollbar-thin">
                        <!-- Model Selection -->
                        <div class="p-4">
                            <div class="form-group">
                                <label for="model-select" class="text-xs font-bold text-gray-800">Model</label>
                                <select id="model-select" class="w-full mt-1 p-2 border border-gray-300 rounded text-sm">
                                    <option value="flux">Flux</option>
                                    <option value="flux-dev">Flux Dev</option>
                                    <option value="flux-fast">Flux Fast</option>
                                    <option value="sdxl">Stable Diffusion XL</option>
                                    <option value="recraft-v3">Recraft V3</option>
                                    <option value="gpt-image-1">GPT-Image-1</option>
                                </select>
                            </div>
                            
                            <!-- Use Real API Toggle -->
                            <div class="form-group">
                                <div class="flex items-center justify-between">
                                    <span class="text-xs font-semibold text-gray-700">Use Real API</span>
                                    <label class="toggle-switch">
                                        <input type="checkbox" id="use-real-api">
                                        <span class="slider"></span>
                                    </label>
                                </div>
                                <p class="text-xs text-gray-500 mt-1" id="api-mode-text">
                                    Using placeholder images. Images won't match prompts.
                                </p>
                            </div>
                        </div>
                        
                        <!-- Prompt Section -->
                        <div class="border-t border-gray-200 px-4 py-4 bg-gray-50">
                            <div class="w-full rounded bg-gray-100 border border-gray-200">
                                <textarea 
                                    id="prompt-textarea"
                                    class="w-full p-3 bg-gray-50 resize-none text-gray-800 border-none outline-none" 
                                    placeholder="Describe the image you want to generate..." 
                                    rows="6"
                                    style="font-size: 0.875rem; line-height: 1.25rem;"
                                ></textarea>
                            </div>
                        </div>
                        
                        <!-- Model-specific Settings -->
                        <div id="model-settings" class="px-4 py-4">
                            <!-- Flux Settings -->
                            <div id="flux-settings" class="model-settings hidden">
                                <h4 class="text-sm font-semibold mb-3">Flux Settings</h4>
                                <div class="form-row">
                                    <div class="form-group">
                                        <label>Width</label>
                                        <input type="number" id="flux-width" value="1024" min="64" max="2048" class="input-field">
                                    </div>
                                    <div class="form-group">
                                        <label>Height</label>
                                        <input type="number" id="flux-height" value="1024" min="64" max="2048" class="input-field">
                                    </div>
                                </div>
                                <div class="form-row">
                                    <div class="form-group">
                                        <label>Steps</label>
                                        <input type="number" id="flux-steps" value="30" min="1" max="100" class="input-field">
                                    </div>
                                    <div class="form-group">
                                        <label>Seed (optional)</label>
                                        <input type="number" id="flux-seed" placeholder="Random" class="input-field">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label>Negative Prompt</label>
                                    <input type="text" id="flux-negative-prompt" placeholder="What to avoid..." class="input-field">
                                </div>
                            </div>

                            <!-- Recraft Settings -->
                            <div id="recraft-settings" class="model-settings hidden">
                                <h4 class="text-sm font-semibold mb-3">Recraft V3 Settings</h4>
                                <div class="form-row">
                                    <div class="form-group">
                                        <label>Image Size</label>
                                        <select id="recraft-size" class="input-field">
                                            <option value="square_hd">Square HD</option>
                                            <option value="square">Square</option>
                                            <option value="portrait_4_3">Portrait 4:3</option>
                                            <option value="portrait_16_9">Portrait 16:9</option>
                                            <option value="landscape_4_3">Landscape 4:3</option>
                                            <option value="landscape_16_9">Landscape 16:9</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label>Style</label>
                                        <select id="recraft-style" class="input-field">
                                            <option value="realistic_image">Realistic Image</option>
                                            <option value="digital_illustration">Digital Illustration</option>
                                            <option value="vector_illustration">Vector Illustration</option>
                                            <option value="realistic_image/b_and_w">B&W Realistic</option>
                                            <option value="realistic_image/hard_flash">Hard Flash</option>
                                            <option value="realistic_image/hdr">HDR</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="flex items-center">
                                        <input type="checkbox" id="recraft-safety" class="mr-2">
                                        <label for="recraft-safety">Enable Safety Checker</label>
                                    </div>
                                </div>
                            </div>

                            <!-- GPT-Image-1 Settings -->
                            <div id="gpt-settings" class="model-settings hidden">
                                <h4 class="text-sm font-semibold mb-3">GPT-Image-1 Settings</h4>
                                <div class="form-row">
                                    <div class="form-group">
                                        <label>Image Size</label>
                                        <select id="gpt-size" class="input-field">
                                            <option value="256x256">256x256</option>
                                            <option value="512x512">512x512</option>
                                            <option value="1024x1024">1024x1024</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label>Quality</label>
                                        <select id="gpt-quality" class="input-field">
                                            <option value="standard">Standard</option>
                                            <option value="hd">HD</option>
                                        </select>
                                    </div>
                                </div>
                                <p class="text-xs text-gray-500">Requires OpenAI API key in settings</p>
                            </div>
                        </div>
                        
                        <!-- Error Display -->
                        <div id="error-display" class="hidden px-4">
                            <div class="error-message" id="error-text"></div>
                        </div>
                        
                        <!-- Image Preview -->
                        <div class="px-4">
                            <div id="preview-container" class="preview-container">
                                <div id="preview-content" class="text-center text-gray-500">
                                    <div class="bg-gray-200 rounded-lg mx-auto mb-4 flex items-center justify-center" style="width: 96px; height: 96px;">
                                        <svg width="32" height="32" fill="none" viewBox="0 0 24 24">
                                            <path fill="currentColor" d="M4 5.001a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v14a1 1 0 0 1-1 1h-6.35l-2.624-5.906c-.828-1.863-3.21-2.358-4.738-1.064-.446.377-.889.745-1.288 1.066z"/>
                                        </svg>
                                    </div>
                                    <p class="text-sm">Generated image will appear here</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Generate Button -->
                    <div class="p-4 border-t border-gray-200">
                        <button class="generate-button w-full h-10 text-white text-sm font-medium rounded-lg" id="generate-btn">
                            Generate Image
                        </button>
                    </div>
                </aside>
                
                <!-- Main Canvas Area -->
                <div class="relative w-full h-full overflow-hidden">
                    <div class="canvas-area relative overflow-hidden w-full h-full">
                        <!-- Canvas Content -->
                        <div class="w-full h-full flex items-center justify-center text-gray-500" id="canvas-area">
                            <div style="text-align: center;">
                                <div class="bg-gray-200 rounded-lg mx-auto mb-4 flex items-center justify-center" style="width: 96px; height: 96px;">
                                    <svg width="32" height="32" fill="none" viewBox="0 0 24 24">
                                        <path fill="currentColor" d="M4 5.001a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v14a1 1 0 0 1-1 1h-6.35l-2.624-5.906c-.828-1.863-3.21-2.358-4.738-1.064-.446.377-.889.745-1.288 1.066z"/>
                                    </svg>
                                </div>
                                <p class="text-sm">Canvas Area</p>
                                <p class="text-xs text-gray-400 mt-1">Generated images will appear here</p>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Zoom Controls -->
                    <div class="absolute bottom-4 right-4 flex items-center">
                        <div class="flex items-center h-8 px-3 bg-white rounded shadow text-xs text-gray-800" style="gap: 12px;">
                            <button class="flex items-center justify-center w-5 h-5 hover:bg-gray-100 rounded nav-icon-btn" id="zoom-out">
                                <svg width="16" height="16" fill="none" viewBox="0 0 24 24">
                                    <path fill="currentColor" d="M5 12a1 1 0 0 1 1-1h12a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1"/>
                                </svg>
                            </button>
                            <span class="cursor-pointer" style="width: 32px; text-align: center;" id="zoom-display">100%</span>
                            <button class="flex items-center justify-center w-5 h-5 hover:bg-gray-100 rounded nav-icon-btn" id="zoom-in">
                                <svg width="16" height="16" fill="none" viewBox="0 0 24 24">
                                    <path fill="currentColor" d="M13 5a1 1 0 1 0-2 0v6H5a1 1 0 1 0 0 2h6v6a1 1 0 1 0 2 0v-6h6a1 1 0 1 0 0-2h-6z"/>
                                </svg>
                            </button>
                            <button class="flex items-center justify-center w-5 h-5 hover:bg-gray-100 rounded nav-icon-btn ml-3">
                                <svg width="16" height="16" fill="none" viewBox="0 0 24 24">
                                    <path fill="currentColor" d="M12 2a1 1 0 0 1 1 1v8a1 1 0 1 1-2 0V4.414l-2.293 2.293a1 1 0 0 1-1.414-1.414L10.586 2H3a1 1 0 0 1 0-2h8a1 1 0 0 1 1 1"/>
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // AI Image Generation State
        const aiState = {
            apiKey: localStorage.getItem('falApiKey') ? atob(localStorage.getItem('falApiKey')) : null,
            openaiApiKey: localStorage.getItem('openaiApiKey') ? atob(localStorage.getItem('openaiApiKey')) : null,
            selectedModel: 'flux',
            prompt: '',
            isGenerating: false,
            generatedImageUrl: null,
            useRealApi: false
        };

        // Fal.ai Models Configuration
        const FAL_MODELS = {
            'flux': 'fal-ai/flux',
            'flux-dev': 'fal-ai/flux/dev',
            'flux-fast': 'fal-ai/flux/fast',
            'sdxl': 'fal-ai/stable-diffusion-xl',
            'recraft-v3': 'fal-ai/recraft-v3',
            'gpt-image-1': 'fal-ai/gpt-image-1/text-to-image/byok'
        };

        // Fal.ai Service Class
        class FalAiService {
            constructor() {
                this.apiKey = null;
                this.usePlaceholders = true;
            }

            initialize(apiKey) {
                this.apiKey = apiKey;
                console.log('Fal.ai service initialized');
                return true;
            }

            isInitialized() {
                return this.apiKey !== null;
            }

            setUsePlaceholders(usePlaceholders) {
                this.usePlaceholders = usePlaceholders;
                console.log(`Using ${usePlaceholders ? 'placeholder images' : 'Fal.ai API'}`);
            }

            async generateImage(modelType, options) {
                if (!this.apiKey) {
                    throw new Error('Fal.ai API key not set. Please set API key first.');
                }

                const modelId = FAL_MODELS[modelType];
                if (!modelId) {
                    throw new Error(`Invalid model type: ${modelType}`);
                }

                try {
                    console.log('Generating image with model:', modelId);

                    // DEVELOPMENT MODE: Return placeholder images
                    if (this.usePlaceholders) {
                        console.log('Using placeholder image (development mode)');
                        await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate API delay
                        
                        const seed = Math.floor(Math.random() * 1000);
                        const width = options.width || 1024;
                        const height = options.height || 1024;
                        
                        return `https://picsum.photos/seed/${seed}/${width}/${height}`;
                    }

                    // PRODUCTION MODE: Use the Fal.ai API
                    let requestOptions;
                    
                    if (modelId === 'fal-ai/recraft-v3') {
                        requestOptions = {
                            prompt: options.prompt,
                            image_size: options.imageSize || 'square_hd',
                            style: options.style || 'realistic_image',
                            colors: options.colors || [],
                            enable_safety_checker: options.enableSafetyChecker || false,
                        };
                    } else if (modelId === 'fal-ai/gpt-image-1/text-to-image/byok') {
                        requestOptions = {
                            prompt: options.prompt,
                            openai_api_key: options.openaiApiKey || '',
                        };
                        
                        if (!requestOptions.openai_api_key) {
                            throw new Error('OpenAI API key is required for GPT-Image-1 model');
                        }
                    } else {
                        // Default for Flux and SDXL models
                        requestOptions = {
                            prompt: options.prompt,
                            negative_prompt: options.negativePrompt || '',
                            image_size: {
                                width: options.width || 1024,
                                height: options.height || 1024,
                            },
                            num_inference_steps: options.numSteps || 30,
                            seed: options.seed || Math.floor(Math.random() * 2147483647),
                        };
                    }

                    console.log('Request options:', requestOptions);

                    // Call the Fal.ai API
                    const response = await fetch(`https://api.fal.ai/rest/v1/generation/${modelId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Key ${this.apiKey}`,
                        },
                        body: JSON.stringify(requestOptions),
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(`Fal.ai API error: ${errorData.message || errorData.detail || 'Unknown error'}`);
                    }

                    const result = await response.json();
                    console.log('Image generated successfully:', result);

                    if (result.images && result.images.length > 0) {
                        return result.images[0].url;
                    } else if (result.image) {
                        return result.image.url;
                    } else {
                        throw new Error('No image found in response');
                    }
                } catch (error) {
                    console.error('Error generating image with Fal.ai:', error);
                    throw new Error(`Failed to generate image: ${error.message}`);
                }
            }
        }

        // Initialize Fal.ai service
        const falAiService = new FalAiService();

        // DOM Elements
        const elements = {
            settingsModal: document.getElementById('settings-modal'),
            falApiKeyInput: document.getElementById('fal-api-key'),
            openaiApiKeyInput: document.getElementById('openai-api-key'),
            modelSelect: document.getElementById('model-select'),
            useRealApiToggle: document.getElementById('use-real-api'),
            apiModeText: document.getElementById('api-mode-text'),
            promptTextarea: document.getElementById('prompt-textarea'),
            generateBtn: document.getElementById('generate-btn'),
            previewContainer: document.getElementById('preview-container'),
            previewContent: document.getElementById('preview-content'),
            errorDisplay: document.getElementById('error-display'),
            errorText: document.getElementById('error-text'),
            canvasArea: document.getElementById('canvas-area'),
            
            // Model-specific settings
            fluxSettings: document.getElementById('flux-settings'),
            recraftSettings: document.getElementById('recraft-settings'),
            gptSettings: document.getElementById('gpt-settings'),
            
            // Flux inputs
            fluxWidth: document.getElementById('flux-width'),
            fluxHeight: document.getElementById('flux-height'),
            fluxSteps: document.getElementById('flux-steps'),
            fluxSeed: document.getElementById('flux-seed'),
            fluxNegativePrompt: document.getElementById('flux-negative-prompt'),
            
            // Recraft inputs
            recraftSize: document.getElementById('recraft-size'),
            recraftStyle: document.getElementById('recraft-style'),
            recraftSafety: document.getElementById('recraft-safety'),
            
            // GPT inputs
            gptSize: document.getElementById('gpt-size'),
            gptQuality: document.getElementById('gpt-quality')
        };

        // Initialize the application
        function initializeApp() {
            // Load saved API keys
            if (aiState.apiKey) {
                elements.falApiKeyInput.value = aiState.apiKey;
                falAiService.initialize(aiState.apiKey);
            }
            
            if (aiState.openaiApiKey) {
                elements.openaiApiKeyInput.value = aiState.openaiApiKey;
            }

            // Set initial API mode
            falAiService.setUsePlaceholders(!aiState.useRealApi);
            updateApiModeText();
            updateModelSettings();

            // Bind event listeners
            bindEventListeners();
        }

        // Bind all event listeners
        function bindEventListeners() {
            // Model selection
            elements.modelSelect.addEventListener('change', function() {
                aiState.selectedModel = this.value;
                updateModelSettings();
            });

            // Real API toggle
            elements.useRealApiToggle.addEventListener('change', function() {
                aiState.useRealApi = this.checked;
                falAiService.setUsePlaceholders(!this.checked);
                updateApiModeText();
            });

            // Prompt input
            elements.promptTextarea.addEventListener('input', function() {
                aiState.prompt = this.value;
            });

            // Generate button
            elements.generateBtn.addEventListener('click', handleGenerateImage);

            // Tool selection
            const toolButtons = document.querySelectorAll('[data-tool]');
            toolButtons.forEach(button => {
                button.addEventListener('click', function() {
                    toolButtons.forEach(btn => btn.classList.remove('selected'));
                    this.classList.add('selected');
                });
            });

            // Zoom controls
            document.getElementById('zoom-in')?.addEventListener('click', () => updateZoom('in'));
            document.getElementById('zoom-out')?.addEventListener('click', () => updateZoom('out'));
        }

        // Update API mode text
        function updateApiModeText() {
            elements.apiModeText.textContent = aiState.useRealApi 
                ? "Using real Fal.ai API. Images will match your prompts."
                : "Using placeholder images. Images won't match prompts.";
        }

        // Update model-specific settings visibility
        function updateModelSettings() {
            // Hide all model settings
            elements.fluxSettings.classList.add('hidden');
            elements.recraftSettings.classList.add('hidden');
            elements.gptSettings.classList.add('hidden');

            // Show relevant settings
            if (aiState.selectedModel.startsWith('flux') || aiState.selectedModel === 'sdxl') {
                elements.fluxSettings.classList.remove('hidden');
            } else if (aiState.selectedModel === 'recraft-v3') {
                elements.recraftSettings.classList.remove('hidden');
            } else if (aiState.selectedModel === 'gpt-image-1') {
                elements.gptSettings.classList.remove('hidden');
            }
        }

        // Handle image generation
        async function handleGenerateImage() {
            if (aiState.isGenerating) return;

            // Validate inputs
            if (!aiState.prompt.trim()) {
                showError('Please enter a prompt before generating an image.');
                return;
            }

            if (aiState.useRealApi && !aiState.apiKey) {
                showError('Please set your Fal.ai API key in settings before generating images.');
                openSettings();
                return;
            }

            if (aiState.selectedModel === 'gpt-image-1' && aiState.useRealApi && !aiState.openaiApiKey) {
                showError('OpenAI API key is required for GPT-Image-1 model. Please add it in settings.');
                openSettings();
                return;
            }

            try {
                aiState.isGenerating = true;
                updateGenerateButton();
                hideError();

                // Initialize service if needed
                if (aiState.useRealApi && !falAiService.isInitialized()) {
                    falAiService.initialize(aiState.apiKey);
                }

                // Prepare generation options
                const options = {
                    prompt: aiState.prompt,
                    openaiApiKey: aiState.openaiApiKey
                };

                // Add model-specific options
                if (aiState.selectedModel.startsWith('flux') || aiState.selectedModel === 'sdxl') {
                    options.width = parseInt(elements.fluxWidth.value) || 1024;
                    options.height = parseInt(elements.fluxHeight.value) || 1024;
                    options.numSteps = parseInt(elements.fluxSteps.value) || 30;
                    options.seed = elements.fluxSeed.value ? parseInt(elements.fluxSeed.value) : undefined;
                    options.negativePrompt = elements.fluxNegativePrompt.value;
                } else if (aiState.selectedModel === 'recraft-v3') {
                    options.imageSize = elements.recraftSize.value;
                    options.style = elements.recraftStyle.value;
                    options.enableSafetyChecker = elements.recraftSafety.checked;
                }

                // Generate image
                const imageUrl = await falAiService.generateImage(aiState.selectedModel, options);
                
                aiState.generatedImageUrl = imageUrl;
                displayGeneratedImage(imageUrl);

            } catch (error) {
                console.error('Generation error:', error);
                showError(error.message);
            } finally {
                aiState.isGenerating = false;
                updateGenerateButton();
            }
        }

        // Update generate button state
        function updateGenerateButton() {
            const btn = elements.generateBtn;
            if (aiState.isGenerating) {
                btn.classList.add('disabled');
                btn.innerHTML = `
                    <div class="flex items-center justify-center">
                        <div class="animate-spin rounded-full border-b-2 border-white mr-2" style="height: 16px; width: 16px;"></div>
                        <span>Generating...</span>
                    </div>
                `;
            } else {
                btn.classList.remove('disabled');
                btn.innerHTML = 'Generate Image';
            }
        }

        // Display generated image
        function displayGeneratedImage(imageUrl) {
            elements.previewContent.innerHTML = `
                <img src="${imageUrl}" alt="Generated Image" class="image-preview" />
                <button onclick="addImageToCanvas('${imageUrl}')" class="add-to-canvas-button">
                    Add to Canvas
                </button>
            `;
        }

        // Add image to canvas
        function addImageToCanvas(imageUrl) {
            const canvasArea = elements.canvasArea;
            canvasArea.innerHTML = `
                <div style="text-align: center;">
                    <img src="${imageUrl}" alt="Canvas Image" style="max-width: 80%; max-height: 80%; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);" />
                    <p class="text-sm mt-4">Image added to canvas</p>
                    <button onclick="clearCanvas()" class="mt-2 px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600">
                        Clear Canvas
                    </button>
                </div>
            `;
        }

        // Clear canvas
        function clearCanvas() {
            elements.canvasArea.innerHTML = `
                <div style="text-align: center;">
                    <div class="bg-gray-200 rounded-lg mx-auto mb-4 flex items-center justify-center" style="width: 96px; height: 96px;">
                        <svg width="32" height="32" fill="none" viewBox="0 0 24 24">
                            <path fill="currentColor" d="M4 5.001a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v14a1 1 0 0 1-1 1h-6.35l-2.624-5.906c-.828-1.863-3.21-2.358-4.738-1.064-.446.377-.889.745-1.288 1.066z"/>
                        </svg>
                    </div>
                    <p class="text-sm">Canvas Area</p>
                    <p class="text-xs text-gray-400 mt-1">Generated images will appear here</p>
                </div>
            `;
        }

        // Show error
        function showError(message) {
            elements.errorText.textContent = message;
            elements.errorDisplay.classList.remove('hidden');
        }

        // Hide error
        function hideError() {
            elements.errorDisplay.classList.add('hidden');
        }

        // Settings modal functions
        function openSettings() {
            elements.settingsModal.classList.remove('hidden');
        }

        function closeSettings() {
            elements.settingsModal.classList.add('hidden');
        }

        // Save API keys
        function saveApiKeys() {
            const falApiKey = elements.falApiKeyInput.value.trim();
            const openaiApiKey = elements.openaiApiKeyInput.value.trim();
            
            if (falApiKey) {
                aiState.apiKey = falApiKey;
                localStorage.setItem('falApiKey', btoa(falApiKey));
                falAiService.initialize(falApiKey);
            }
            
            if (openaiApiKey) {
                aiState.openaiApiKey = openaiApiKey;
                localStorage.setItem('openaiApiKey', btoa(openaiApiKey));
            }
            
            closeSettings();
            
            // Show success message
            const saveBtn = document.querySelector('.save-button');
            const originalText = saveBtn.textContent;
            saveBtn.textContent = 'Saved!';
            saveBtn.style.backgroundColor = '#16a34a';
            
            setTimeout(() => {
                saveBtn.textContent = originalText;
                saveBtn.style.backgroundColor = '#2563eb';
            }, 2000);
        }

        // Zoom functionality
        const zoomLevels = [25, 50, 75, 100, 125, 150, 200];
        let currentZoomIndex = 3; // Start at 100%

        function updateZoom(direction) {
            const zoomDisplay = document.getElementById('zoom-display');
            
            if (direction === 'in' && currentZoomIndex < zoomLevels.length - 1) {
                currentZoomIndex++;
            } else if (direction === 'out' && currentZoomIndex > 0) {
                currentZoomIndex--;
            }
            
            const zoomLevel = zoomLevels[currentZoomIndex];
            zoomDisplay.textContent = `${zoomLevel}%`;
        }

        // Textarea auto-resize
        function setupTextareaResize() {
            const textarea = elements.promptTextarea;
            textarea.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = Math.min(this.scrollHeight, 200) + 'px';
            });
        }

        // Handle modal clicks (close when clicking outside)
        elements.settingsModal.addEventListener('click', function(e) {
            if (e.target === this) {
                closeSettings();
            }
        });

        // Handle escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeSettings();
            }
        });

        // Add ripple effect to buttons
        function addRippleEffect() {
            const buttons = document.querySelectorAll('button');
            buttons.forEach(button => {
                button.addEventListener('click', function(e) {
                    if (this.classList.contains('nav-icon-btn')) {
                        const ripple = document.createElement('span');
                        const rect = this.getBoundingClientRect();
                        const size = Math.max(rect.width, rect.height);
                        const x = e.clientX - rect.left - size / 2;
                        const y = e.clientY - rect.top - size / 2;
                        
                        ripple.style.width = ripple.style.height = size + 'px';
                        ripple.style.left = x + 'px';
                        ripple.style.top = y + 'px';
                        ripple.style.position = 'absolute';
                        ripple.style.borderRadius = '50%';
                        ripple.style.background = 'rgba(255, 255, 255, 0.6)';
                        ripple.style.transform = 'scale(0)';
                        ripple.style.animation = 'ripple 0.6s linear';
                        ripple.style.pointerEvents = 'none';
                        
                        this.style.position = 'relative';
                        this.style.overflow = 'hidden';
                        this.appendChild(ripple);
                        
                        setTimeout(() => {
                            ripple.remove();
                        }, 600);
                    }
                });
            });
        }

        // Add ripple animation keyframes
        const style = document.createElement('style');
        style.textContent = `
            @keyframes ripple {
                to {
                    transform: scale(4);
                    opacity: 0;
                }
            }
        `;
        document.head.appendChild(style);

        // Placeholder image service for development
        function getPlaceholderImage(width = 1024, height = 1024) {
            const seed = Math.floor(Math.random() * 1000);
            return `https://picsum.photos/seed/${seed}/${width}/${height}`;
        }

        // Demo mode functions
        function enableDemoMode() {
            // Add some demo prompts
            const demoPrompts = [
                "A majestic mountain landscape at sunset",
                "A cute robot playing with a cat in a garden",
                "Abstract digital art with flowing colors",
                "A steampunk cityscape with flying machines",
                "A peaceful forest scene with magical lighting"
            ];

            // Add demo prompt selector
            const demoControls = document.createElement('div');
            demoControls.innerHTML = `
                <div class="p-4 border-b border-gray-200 bg-blue-50">
                    <h4 class="text-sm font-semibold text-blue-800 mb-2">Demo Mode</h4>
                    <select id="demo-prompts" class="w-full p-2 border border-blue-300 rounded text-sm">
                        <option value="">Select a demo prompt...</option>
                        ${demoPrompts.map(prompt => `<option value="${prompt}">${prompt}</option>`).join('')}
                    </select>
                </div>
            `;

            // Insert after the header
            const panelContent = document.querySelector('.flex-1.overflow-y-auto');
            panelContent.insertBefore(demoControls, panelContent.firstChild);

            // Handle demo prompt selection
            document.getElementById('demo-prompts').addEventListener('change', function() {
                if (this.value) {
                    elements.promptTextarea.value = this.value;
                    aiState.prompt = this.value;
                }
            });
        }

        // Initialize everything when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
            setupTextareaResize();
            addRippleEffect();
            
            // Enable demo mode if no API key is set
            if (!aiState.apiKey) {
                enableDemoMode();
            }

            console.log('AI Image Generator initialized');
        });

        // Make functions globally available
        window.openSettings = openSettings;
        window.closeSettings = closeSettings;
        window.saveApiKeys = saveApiKeys;
        window.addImageToCanvas = addImageToCanvas;
        window.clearCanvas = clearCanvas;
    </script>
</body>
</html>